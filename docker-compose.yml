version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      NODE_ENV: dev
      PORT: ${PORT}
      DATABASE_URL: "mysql://admin:tset@mysql:3306/sftv"
      DB_HOST: ${SFTV_MYSQL_HOST}
      DB_PORT: ${SFTV_MYSQL_PORT}
      DB_USER: ${SFTV_MYSQL_USER}
      DB_PASSWORD: ${SFTV_MYSQL_PASSWORD}
      DB_NAME: ${SFTV_MYSQL_DATABASE}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET_NAME}
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}

    # MySQL이 살아 있고 Redis가 시작된 뒤에만 기동
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started

    networks:
      - socket-network
      - ssafitv-network

  mysql:
    image: mysql:8.2.0
    restart: always
    volumes:
      - ./mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${SFTV_MYSQL_DATABASE}
      MYSQL_USER: ${SFTV_MYSQL_USER}
      MYSQL_PASSWORD: ${SFTV_MYSQL_PASSWORD}
      MYSQL_ROOT_HOST: "%"
      DEFAULT_AUTHENTICATION_PLUGIN: caching_sha2_password

    # ── healthcheck: 서비스가 ready 상태인지 확인 ──
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p${MYSQL_ROOT_PASSWORD}", "--silent"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

    networks:
      - socket-network
      - ssafitv-network

  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    networks:
      - socket-network
      - ssafitv-network

volumes:
  mysql-data:

networks:
  socket-network:
    driver: bridge
  ssafitv-network:
    external: true
